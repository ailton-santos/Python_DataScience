# -*- coding: utf-8 -*-
"""Atividade_11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/danielbr20998/Atividades-Senai/blob/main/Atividade_11.ipynb
"""

# ATV 11
# A "TechGadgets Ltda." é uma empresa de tecnologia que vende diversos produtos eletrônicos.
# Você foi contratado para analisar o desempenho de vendas nos últimos meses,
# identificar tendências e visualizar os resultados.
# A empresa está interessada em entender as vendas totais,
# a distribuição das vendas por categoria de produto e a variação mensal.
import numpy as np
import pandas as pd
import statistics as st
# Exercício: Desempenho de Vendas e Análise de Produtos

# Geração de Dados Sintéticos (NumPy e Pandas):
# Utilize numpy para gerar os seguintes dados:
# meses: Um array de 12 meses (de 1 a 12) representando um ano.

meses = pd.Series([1,2,3,4,5,6,7,8,9,10,11,12], index=["Janeiro", "Fevereiro", "Março", "Abril", "Maio", "Junho", "Julho", "Agosto", "Setembro", "Outubro", "Novembro", "Dezembro"])
meses

# vendas_produto_A: Um array de 12 valores de vendas para o "Produto A",
# com média de 1000 e desvio padrão de 150 (use np.random.normal).
# Certifique-se de que não há vendas negativas (arredonde para cima ou defina como 0 se for negativo).

vendas_A = np.random.normal(loc=1000, scale=150, size=12)
vendas_A = np.where(vendas_A < 0, 0, np.ceil(vendas_A))
vendas_A

# vendas_produto_B: Um array de 12 valores de vendas para o "Produto B",
# com média de 800 e desvio padrão de 100.

vendas_B = np.random.normal(loc=800, scale=100, size=12)
vendas_B = np.where(vendas_B <0, 0, np.ceil(vendas_B))
vendas_B

# vendas_acessorios: Um array de 12 valores de vendas para "Acessórios",
# com média de 300 e desvio padrão de 50

vendas_acc = np.random.normal(loc=300, scale=50, size=12)
vendas_acc = np.where(vendas_acc < 0, 0, np.ceil(vendas_acc))
vendas_acc

# Crie um DataFrame Pandas chamado df_vendas com as seguintes colunas: 'Mês', 'Produto A', 'Produto B', 'Acessórios'.

df_vendas = pd.DataFrame({'Mês': meses, 'Produto A': vendas_A, 'Produto B': vendas_B, 'Acessórios': vendas_acc})
df_vendas

# Cálculos e Análise (Pandas):

# Adicione uma nova coluna ao df_vendas chamada 'Total Vendas Mensal',
# que será a soma das vendas de 'Produto A', 'Produto B' e 'Acessórios' para cada mês.
# Calcule e exiba a média de vendas de cada produto ('Produto A', 'Produto B', 'Acessórios') e do 'Total Vendas Mensal' para todo o período.
# Calcule e exiba o valor total de vendas para cada categoria de produto
# ('Produto A', 'Produto B', 'Acessórios') e o 'Total Vendas Mensal' acumulado.
# Identifique e exiba o mês com o maior 'Total Vendas Mensal'.
# Identifique e exiba o mês com a menor 'Total Vendas Mensal'

df_vendas['Total Vendas Mensal'] = df_vendas['Produto A'] + df_vendas['Produto B'] + df_vendas['Acessórios']
df_vendas

vendas_max = df_vendas.loc[df_vendas['Total Vendas Mensal'].idxmax()]
vendas_max

vendas_min = df_vendas.loc[df_vendas['Total Vendas Mensal'].idxmin()]
vendas_min

# ATV 11.2: Matplot.

# Gráfico de Linha: Crie um gráfico de linha que mostre a evolução do 'Total Vendas Mensal' ao longo dos meses.
# Defina o 'Mês' no eixo X e 'Total Vendas Mensal' no eixo Y.
# Adicione um título ao gráfico: "Evolução das Vendas Mensais da TechGadgets Ltda.".
# Adicione rótulos aos eixos X ("Mês") e Y ("Vendas (R$)").
# Adicione uma grade ao gráfico.
import matplotlib.pyplot as plt

M = [
    "Jan", "Fev", "Mar", "Abr", "Maio", "Jun", "Jul", "Ago", "Set", "Out", "Nov", "Dez"
]
TVM = df_vendas['Total Vendas Mensal']
plt.figure(figsize=(5, 3))
plt.plot(M, TVM, marker='o', linestyle='-', color='blue')
plt.xlabel('Meses')
plt.ylabel('Total de vendas')
plt.title('Total de vendas neste ano')
plt.grid(True)
plt.show()

# Versão melhorada
plt.figure(figsize=(5,4))
for i in range(1, len(M)):
    cor = 'red' if TVM[i] < TVM[i-1] else 'blue'
    plt.plot(M[i-1:i+1], TVM[i-1:i+1], marker='o', linestyle='-', color=cor)

plt.xlabel('Meses')
plt.ylabel('Total de Vendas')
plt.title('Total de Vendas neste ano')
plt.grid(True)
plt.show()

# Gráfico de Barras: Crie um gráfico de barras que compare as vendas totais de cada categoria de produto
# ('Produto A', 'Produto B', 'Acessórios').
# Defina os nomes das categorias no eixo X e as vendas totais no eixo Y.
# Adicione um título ao gráfico: "Vendas Totais por Categoria de Produto".
# Adicione rótulos aos eixos X ("Categoria de Produto") e Y ("Vendas Totais (R$)").

# Considerando um unico numero maior, ou seja, "max"

PA = vendas_A
PB = vendas_B
acc = vendas_acc
plt.figure(figsize=(3,2))
plt.bar('Produto A', PA, label='Produto A')
plt.bar('Produto B', PB, label='Produto B')
plt.bar('Acessórios', acc, label='Acessórios')
plt.xlabel('Categoria de Produto')
plt.ylabel('Vendas Totais')
plt.title('Vendas Totais por Categoria de Produto')

# Considerando a soma total, ou seja, "sum"

PA = sum(vendas_A)
PB = sum(vendas_B)
acc = sum(vendas_acc)
plt.figure(figsize=(3,2))
plt.bar('Produto A', PA, label='Produto A')
plt.bar('Produto B', PB, label='Produto B')
plt.bar('Acessórios', acc, label='Acessórios')
plt.xlabel('Categoria de Produto')
plt.ylabel('Vendas Totais')
plt.title('Vendas Totais por Categoria de Produto')