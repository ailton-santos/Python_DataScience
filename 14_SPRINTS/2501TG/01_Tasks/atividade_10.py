# -*- coding: utf-8 -*-
"""Atividade_10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/danielbr20998/Atividades-Senai/blob/main/Atividade_10.ipynb
"""

# Exercício 2: Trabalhando com DataFrames
# Criação e Visualização de DataFrames:
# Crie um DataFrame chamado cidades_br com os seguintes dados:
# Coluna 'Cidade': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba']
# Coluna 'Estado': ['SP', 'RJ', 'MG', 'RS', 'PR']
# Coluna 'População (milhões)': [12.3, 6.7, 2.5, 1.5, 1.9]
# Coluna 'Capital': [True, True, True, True, True]
# Exiba o DataFrame completo.
# Exiba as 3 primeiras linhas do DataFrame.
# Exiba 2 linhas aleatórias do DataFrame.
import pandas as pd
import numpy as np
import statistics as st

cidades_br = {
    'Cidade': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba'],
    'Estado': ['SP', 'RJ', 'MG', 'RS', 'PR'],
    'População (milhões)': [12.3, 6.7, 2.5, 1.5, 1.9],
    'Capital': [True,True,True,True,True]
}

Cidades = pd.DataFrame (cidades_br)
Cidades

Cidades.head(3)

Cidades.sample(2)

# Seleção e Atribuição de Colunas:
# Acesse e exiba apenas a coluna 'Cidade'.
# Acesse e exiba as colunas 'Estado' e 'População (milhões)'.
# Adicione uma nova coluna chamada:
# 'Área (km²)' com os valores [1521, 1200, 331, 496, 435]. Exiba o DataFrame atualizado.
# Altere os valores da coluna 'Capital' para False para 'Porto Alegre' e 'Curitiba'. Exiba o DataFrame.

cdc = pd.DataFrame(Cidades, columns=['Cidade'])
cdc

cep = pd.DataFrame(Cidades, columns=['Estado','População (milhões)'])
cep

cidades_br2 = {
    'Cidade': ['São Paulo', 'Rio de Janeiro', 'Belo Horizonte', 'Porto Alegre', 'Curitiba'],
    'Estado': ['SP', 'RJ', 'MG', 'RS', 'PR'],
    'População (milhões)': [12.3, 6.7, 2.5, 1.5, 1.9],
    'Capital': [True,True,True,True,True],
    'Area (km²)': [1521, 1200, 331, 496, 435]
}

Cidades2 = pd.DataFrame(cidades_br2)

Cidades2.loc[Cidades2['Cidade'] == 'Porto Alegre', 'Capital'] = False
Cidades2.loc[Cidades2['Cidade'] == 'Curitiba', 'Capital'] = False
Cidades2

# Análise e Manipulação de DataFrames:
# Renomeie as colunas do DataFrame para:
# ['Nome da Cidade', 'UF', 'Habitantes (M)', 'É Capital', 'Tamanho (km²)']. Exiba o DataFrame.
# Utilize o método describe() para obter um resumo estatístico das colunas numéricas do DataFrame.
# Exiba apenas as cidades cuja 'População (milhões)' seja maior que 2.0.
# Exclua a coluna 'Tamanho (km²)' do DataFrame. Exiba o DataFrame após a exclusão.

Cidades3 = Cidades2.rename(columns={'Cidade': 'Nome da Cidade', 'Estado': 'UF', 'População (milhões)': 'Habitantes (M)', 'Capital': 'É Capital', 'Area (km²)': 'Tamanho (km²)'})
Cidades3

desc = Cidades3.describe()
desc

Cidades3[Cidades3['Habitantes (M)'] > 2.0]

Cidades4 = Cidades3.drop(columns=['Tamanho (km²)'])
Cidades4

# Seleção de Linhas por Posição:
# Exiba a primeira linha do DataFrame usando iloc.
# Exiba as linhas de índice 1 a 3 (inclusive a linha 3) usando iloc.
# Exiba a coluna 'UF' e 'Habitantes (M)' para as linhas de índice 0 e 4 usando iloc.

Cidades4.iloc[0:1]

Cidades4.iloc[1:4]

Cidades4.iloc[0:5:4,[1,2]]

